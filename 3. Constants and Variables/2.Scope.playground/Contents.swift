
/*:
 # Scope
 */

// #1 - global scope(전역변수)
let g1 = 123
// g2 => 선언전이므로 접근 불가
// l1  => 하위 스코프에 접근 불가

func doSomething() {
    // #3 - local scope(지역변수)
    let l1 = 123
    
    let g1 = 456 // 다른 스코프니까 같은 식별자로 선언하는 것 가능, 가장 인접한 값 사용
    g1
    g2
    
    
    if true {
        // #4 - local scope
        l1
        g1
        // l2  => 선언되기 전에 접근 불가
        let l3 = 123
    }
    
    // #5 - local scope
    let l2 = 123
    // l3  하위 스코프에 접근 불가
}

// #2 - global scope
//let g1 = 123   //에러발생
let g2 = 123
g1
g2


struct Scope {
    // #6 - 문법적으로 선언이 와야하는 위치 ===> 표현식은 올수가 없음
    
    func doSomething() {
        // #7
        g1
        g2
    }
}

doSomething()

// 1.동일한 스코프에 있는 변수와 상수에 접근할 수 있다.
// 2.동일한 스코프에서는 이전에 선언되어있는 변수와 상수에 접근할 수 있다.
// 3.로컬 스코프에서는 자신의 상위 스코프에 선언된 변수와 상수에 접근할 수 있다.
//   하지만, 함수실행 이전에 아직 선언되어있지 않은 경우 접근할 수 없다.
// 4.상위스코프에서는 하위스코프에 접근할 수 없다.
// 5.동일한 스코프에서 이름이 중복될 수 없다.
// 6.서로 다른 스코프에 동일한 이름을 가진 변수와 상수가 존재한다면, 가장 인접한 스코프에 있는 변수와 상수를 사용한다.

