import UIKit

/*
 
 ** Structure
 비교적 작은 데이터를 저장, 값형식
 
 ** Class
 상속이 가능, 참조형식
 
 * 구조체와 클래스는 저장공간을 처리하는 방식에 차이가 있음
 1) 구조체 => 스택이라는 메모리 공간에 저장 / 값을 전달할때마다 복사본을 생성 (값 형식) 값형식 예: 열거형, 기본자료형
 2) 클래스 => 힙 공간에 값을 저장(스택에는 힙에 저장되어 값의 주소를 저장) / 값을 전달하면 복사본을 생성하지 않고 주소만 전달 (참조형식) 예: 클래스, 클로저

 * 메모리 관리 방식
 값형식 => 스코프 종료시, 메모리에서 자동제거
 참조형식 => 레퍼런스 카운팅 ARC
 
 ** Initializer(생성자)
 속성 초기화가 가장 중요하고 유일한 목적
 
 ** Value Types and Reference Types
 값형식 => 복사해서 저장 (다른 메모리 공간)
 참조형식 => 복사본을 전달하지 않고 원본을 전달 (메모리 주소를 전달)
 
 ** Identity Operator(항등 연산자)
 1) 값형식 => 값을 Stack에 저장 (하나의 공간에 저장, 비교연산자 하나로 충분)
 2) 참조형식 => 값을 Heap에 저장, 메모리주소를 Stack에 저장 (두개의 공간에 저장하기 때문에, 비교하는 방법도 2가지가 필요)
 메모리 주소를 비교할 때 항등연산자 사용 ( === / !== )
 항등연산자(===)로 비교한 메모리주소가 동일하다면 => Identical하다라고 표현
 비교연산자(==)로 비교한 값이 동일하다면 => Equal하다고 표현
 
 ** Nested Types(포함된 형식, 내포된 형식)
 하나의 형식 내부에 다른 형식을 선언
 String.CompareOptions => 포함관계를 점으로 연결
 
 */
